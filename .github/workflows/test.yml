name: Test Suite

on:
  push:
    branches: [ main, develop, "claude/*" ]
  pull_request:
    branches: [ main, develop ]

jobs:
  rust-tests:
    name: Rust Tests (CLI Wrapper)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            OxVCS-CLI-Wrapper/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        working-directory: OxVCS-CLI-Wrapper
        run: cargo fmt -- --check

      - name: Run clippy
        working-directory: OxVCS-CLI-Wrapper
        run: cargo clippy -- -D warnings

      - name: Run tests
        working-directory: OxVCS-CLI-Wrapper
        run: cargo test --verbose

      - name: Install tarpaulin (coverage tool)
        run: cargo install cargo-tarpaulin || true

      - name: Generate coverage
        working-directory: OxVCS-CLI-Wrapper
        run: cargo tarpaulin --out Xml --output-dir coverage || echo "Coverage generation skipped (no tests yet)"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          files: ./OxVCS-CLI-Wrapper/coverage/cobertura.xml
          flags: rust-cli
          fail_ci_if_error: false

  swift-daemon-tests:
    name: Swift Tests (LaunchAgent Daemon)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode.app

      - name: Swift version
        run: swift --version

      - name: Run tests
        working-directory: OxVCS-LaunchAgent
        run: swift test --enable-code-coverage

      - name: Generate coverage report
        working-directory: OxVCS-LaunchAgent
        run: |
          set -e
          XCTEST_PATH=$(find .build -name "*PackageTests.xctest" | head -n 1)
          PROFDATA_PATH=$(find .build -name "default.profdata" | head -n 1)

          if [ -n "$XCTEST_PATH" ] && [ -n "$PROFDATA_PATH" ]; then
            BINARY_PATH="$XCTEST_PATH/Contents/MacOS/$(basename $XCTEST_PATH .xctest)"
            xcrun llvm-cov export \
              -format="lcov" \
              "$BINARY_PATH" \
              -instr-profile "$PROFDATA_PATH" > coverage.lcov || true
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          files: ./OxVCS-LaunchAgent/coverage.lcov
          flags: swift-daemon
          fail_ci_if_error: false

  swift-app-tests:
    name: Swift Tests (App UI)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode.app

      - name: Swift version
        run: swift --version

      - name: Run tests
        working-directory: OxVCS-App
        run: swift test --enable-code-coverage || echo "No tests yet, continuing..."

      - name: Generate coverage report
        working-directory: OxVCS-App
        run: |
          set -e
          XCTEST_PATH=$(find .build -name "*PackageTests.xctest" | head -n 1)
          PROFDATA_PATH=$(find .build -name "default.profdata" | head -n 1)

          if [ -n "$XCTEST_PATH" ] && [ -n "$PROFDATA_PATH" ]; then
            BINARY_PATH="$XCTEST_PATH/Contents/MacOS/$(basename $XCTEST_PATH .xctest)"
            xcrun llvm-cov export \
              -format="lcov" \
              "$BINARY_PATH" \
              -instr-profile "$PROFDATA_PATH" > coverage.lcov || true
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          files: ./OxVCS-App/coverage.lcov
          flags: swift-app
          fail_ci_if_error: false

  lint-check:
    name: Linting and Formatting
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Check Rust formatting
        working-directory: OxVCS-CLI-Wrapper
        run: cargo fmt -- --check

      - name: Run Clippy
        working-directory: OxVCS-CLI-Wrapper
        run: cargo clippy -- -D warnings

  report-status:
    name: Test Status Summary
    runs-on: ubuntu-latest
    needs: [rust-tests, swift-daemon-tests, swift-app-tests, lint-check]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Test suite completed"
          echo "Rust tests: ${{ needs.rust-tests.result }}"
          echo "Swift daemon tests: ${{ needs.swift-daemon-tests.result }}"
          echo "Swift app tests: ${{ needs.swift-app-tests.result }}"
          echo "Lint check: ${{ needs.lint-check.result }}"

      - name: Fail if any tests failed
        if: |
          needs.rust-tests.result == 'failure' ||
          needs.swift-daemon-tests.result == 'failure' ||
          needs.swift-app-tests.result == 'failure' ||
          needs.lint-check.result == 'failure'
        run: exit 1
